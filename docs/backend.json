{
  "entities": {
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents a customer's order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "drinkId": {
          "type": "string",
          "description": "Reference to the Drink ordered. (Relationship: Drink 1:N Order)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the drink ordered."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method used for the order (cash, QR scan, credit card QR)."
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "orderTime": {
          "type": "string",
          "description": "Timestamp of when the order was placed.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, served)."
        }
      },
      "required": [
        "id",
        "drinkId",
        "quantity",
        "paymentMethod",
        "totalAmount",
        "orderTime",
        "status"
      ]
    },
    "Drink": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Drink",
      "type": "object",
      "description": "Represents a drink item on the menu.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the drink."
        },
        "name": {
          "type": "string",
          "description": "Name of the drink (e.g., Green Menu, Red Menu, Yellow Menu)."
        },
        "price": {
          "type": "number",
          "description": "Price of the drink."
        },
        "description": {
          "type": "string",
          "description": "Description of the drink item."
        }
      },
      "required": [
        "id",
        "name",
        "price"
      ]
    }
  },
  "auth": {
    "providers": []
  },
  "firestore": {
    "structure": [
      {
        "path": "/drinks/{drinkId}",
        "definition": {
          "entityName": "Drink",
          "schema": {
            "$ref": "#/backend/entities/Drink"
          },
          "description": "Stores the static drink menu data.",
          "params": [
            {
              "name": "drinkId",
              "description": "Unique identifier for the drink."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores customer orders.",
          "params": [
            {
              "name": "orderId",
              "description": "Unique identifier for the order."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed for the SipSwift drink ordering application, prioritizing real-time order management and data integrity. It separates drink menu items from customer orders to optimize query performance and maintain data consistency. The core principle is to enable efficient reads and writes for both the front-of-house order input and back-of-house order display. \n\n*   `/drinks/{drinkId}`: Stores static drink menu data.  Since this data is relatively static, it does not require denormalization.  Reads are public, writes are admin only.\n*   `/orders/{orderId}`: Stores customer orders.  The `drinkId` field is a foreign key relationship. The collection group allows real-time back-of-house order updates. No user-based ownership is defined as every staff member can view every order. It has no user-based ownership, eliminating the need to apply a membership map to the path.\n\nThe structure supports the core features as follows:\n\n*   **Order Input & Confirmation**: Orders are directly written into the `/orders` collection when confirmed.\n*   **Real-time Order Display**: The back-of-house iPad interface can listen for changes in the `/orders` collection to display real-time order updates.\n*   **Serve Status**: Updating the 'status' field in an order document triggers real-time updates on all interfaces.\n*   **Order Storage**: Firestore's document model is used to store all order details within each order document.\n*   **Order History and Summary**:  Queries can be performed against the `/orders` collection to retrieve past orders and calculate sales summaries."
  }
}