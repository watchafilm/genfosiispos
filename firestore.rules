/**
 * @fileoverview Firestore Security Rules for SipSwift.
 *
 * Core Philosophy:
 * This ruleset prioritizes a flexible data structure for prototyping while enforcing strict authorization.
 * It allows public read access to drinks and open access to orders.
 *
 * Data Structure:
 * - /drinks/{drinkId}: Stores information about available drinks. Publicly readable.
 * - /orders/{orderId}: Stores details of customer orders. Open write access.
 *
 * Key Security Decisions:
 * - Public read access for drinks allows anyone to see the menu.
 * - Open access to orders allows for quick order placement during prototyping.
 *
 * Denormalization for Authorization:
 * - Orders include denormalized `drinkId` to avoid costly `get()` calls to the `/drinks` collection during order creation and management.
 *
 * Structural Segregation:
 * - Uses top-level collections for both drinks and orders, which is appropriate given the lack of private user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to drink information.
     * @path /drinks/{drinkId}
     * @allow (get, list) Any user can view drink details.
     * @deny (create, update, delete) No user can create, update, or delete drinks through the client.
     * @principle Public read access for menu items.
     */
    match /drinks/{drinkId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows open write access to orders.
     * @path /orders/{orderId}
     * @allow (create, update, delete) Any user can create, update, or delete orders.
     * @deny (get, list) Not applicable.
     * @principle Open write access for rapid prototyping.
     */
    match /orders/{orderId} {
      allow create: if true;
      allow update: if true;
      allow delete: if true;
      allow get: if true;
      allow list: if true;
    }
  }
}